'------------------------------------------------------------------------------
' <auto-generated>
'     This code was generated by a tool.
'     Runtime Version:4.0.30319.42000
'
'     Changes to this file may cause incorrect behavior and will be lost if
'     the code is regenerated.
' </auto-generated>
'------------------------------------------------------------------------------

Option Strict On
Option Explicit On

Imports System
Imports System.Collections.Generic
Imports System.ComponentModel
Imports System.Data
Imports System.Data.Linq
Imports System.Data.Linq.Mapping
Imports System.Linq
Imports System.Linq.Expressions
Imports System.Reflection


<Global.System.Data.Linq.Mapping.DatabaseAttribute(Name:="db_Cetipolis")>  _
Partial Public Class LinqToSqlDataContext
	Inherits System.Data.Linq.DataContext
	
	Private Shared mappingSource As System.Data.Linq.Mapping.MappingSource = New AttributeMappingSource()
	
  #Region "Extensibility Method Definitions"
  Partial Private Sub OnCreated()
  End Sub
  Partial Private Sub Insertcinemas(instance As cinemas)
    End Sub
  Partial Private Sub Updatecinemas(instance As cinemas)
    End Sub
  Partial Private Sub Deletecinemas(instance As cinemas)
    End Sub
  Partial Private Sub Insertusers(instance As users)
    End Sub
  Partial Private Sub Updateusers(instance As users)
    End Sub
  Partial Private Sub Deleteusers(instance As users)
    End Sub
  Partial Private Sub Insertmovies(instance As movies)
    End Sub
  Partial Private Sub Updatemovies(instance As movies)
    End Sub
  Partial Private Sub Deletemovies(instance As movies)
    End Sub
  Partial Private Sub Inserttickets(instance As tickets)
    End Sub
  Partial Private Sub Updatetickets(instance As tickets)
    End Sub
  Partial Private Sub Deletetickets(instance As tickets)
    End Sub
  #End Region
	
	Public Sub New()
		MyBase.New(Global.Cetipolis.My.MySettings.Default.db_CetipolisConnectionString, mappingSource)
		OnCreated
	End Sub
	
	Public Sub New(ByVal connection As String)
		MyBase.New(connection, mappingSource)
		OnCreated
	End Sub
	
	Public Sub New(ByVal connection As System.Data.IDbConnection)
		MyBase.New(connection, mappingSource)
		OnCreated
	End Sub
	
	Public Sub New(ByVal connection As String, ByVal mappingSource As System.Data.Linq.Mapping.MappingSource)
		MyBase.New(connection, mappingSource)
		OnCreated
	End Sub
	
	Public Sub New(ByVal connection As System.Data.IDbConnection, ByVal mappingSource As System.Data.Linq.Mapping.MappingSource)
		MyBase.New(connection, mappingSource)
		OnCreated
	End Sub
	
	Public ReadOnly Property cinemas() As System.Data.Linq.Table(Of cinemas)
		Get
			Return Me.GetTable(Of cinemas)
		End Get
	End Property
	
	Public ReadOnly Property users() As System.Data.Linq.Table(Of users)
		Get
			Return Me.GetTable(Of users)
		End Get
	End Property
	
	Public ReadOnly Property movies() As System.Data.Linq.Table(Of movies)
		Get
			Return Me.GetTable(Of movies)
		End Get
	End Property
	
	Public ReadOnly Property tickets() As System.Data.Linq.Table(Of tickets)
		Get
			Return Me.GetTable(Of tickets)
		End Get
	End Property
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.cinemas")>  _
Partial Public Class cinemas
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _id_cinema As Integer
	
	Private _name As String
	
	Private _city As String
	
	Private _movies As EntitySet(Of movies)
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub Onid_cinemaChanging(value As Integer)
    End Sub
    Partial Private Sub Onid_cinemaChanged()
    End Sub
    Partial Private Sub OnnameChanging(value As String)
    End Sub
    Partial Private Sub OnnameChanged()
    End Sub
    Partial Private Sub OncityChanging(value As String)
    End Sub
    Partial Private Sub OncityChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._movies = New EntitySet(Of movies)(AddressOf Me.attach_movies, AddressOf Me.detach_movies)
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_id_cinema", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true)>  _
	Public Property id_cinema() As Integer
		Get
			Return Me._id_cinema
		End Get
		Set
			If ((Me._id_cinema = value)  _
						= false) Then
				Me.Onid_cinemaChanging(value)
				Me.SendPropertyChanging
				Me._id_cinema = value
				Me.SendPropertyChanged("id_cinema")
				Me.Onid_cinemaChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_name", DbType:="VarChar(50) NOT NULL", CanBeNull:=false)>  _
	Public Property name() As String
		Get
			Return Me._name
		End Get
		Set
			If (String.Equals(Me._name, value) = false) Then
				Me.OnnameChanging(value)
				Me.SendPropertyChanging
				Me._name = value
				Me.SendPropertyChanged("name")
				Me.OnnameChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_city", DbType:="VarChar(50) NOT NULL", CanBeNull:=false)>  _
	Public Property city() As String
		Get
			Return Me._city
		End Get
		Set
			If (String.Equals(Me._city, value) = false) Then
				Me.OncityChanging(value)
				Me.SendPropertyChanging
				Me._city = value
				Me.SendPropertyChanged("city")
				Me.OncityChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="cinemas_movies", Storage:="_movies", ThisKey:="id_cinema", OtherKey:="id_cinema")>  _
	Public Property movies() As EntitySet(Of movies)
		Get
			Return Me._movies
		End Get
		Set
			Me._movies.Assign(value)
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
	
	Private Sub attach_movies(ByVal entity As movies)
		Me.SendPropertyChanging
		entity.cinemas = Me
	End Sub
	
	Private Sub detach_movies(ByVal entity As movies)
		Me.SendPropertyChanging
		entity.cinemas = Nothing
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.users")>  _
Partial Public Class users
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _id_user As Integer
	
	Private _name As String
	
	Private _lastName As String
	
	Private _username As String
	
	Private _password As String
	
	Private _eMail As String
	
	Private _tickets As EntitySet(Of tickets)
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub Onid_userChanging(value As Integer)
    End Sub
    Partial Private Sub Onid_userChanged()
    End Sub
    Partial Private Sub OnnameChanging(value As String)
    End Sub
    Partial Private Sub OnnameChanged()
    End Sub
    Partial Private Sub OnlastNameChanging(value As String)
    End Sub
    Partial Private Sub OnlastNameChanged()
    End Sub
    Partial Private Sub OnusernameChanging(value As String)
    End Sub
    Partial Private Sub OnusernameChanged()
    End Sub
    Partial Private Sub OnpasswordChanging(value As String)
    End Sub
    Partial Private Sub OnpasswordChanged()
    End Sub
    Partial Private Sub OneMailChanging(value As String)
    End Sub
    Partial Private Sub OneMailChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._tickets = New EntitySet(Of tickets)(AddressOf Me.attach_tickets, AddressOf Me.detach_tickets)
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_id_user", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true)>  _
	Public Property id_user() As Integer
		Get
			Return Me._id_user
		End Get
		Set
			If ((Me._id_user = value)  _
						= false) Then
				Me.Onid_userChanging(value)
				Me.SendPropertyChanging
				Me._id_user = value
				Me.SendPropertyChanged("id_user")
				Me.Onid_userChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_name", DbType:="VarChar(50) NOT NULL", CanBeNull:=false)>  _
	Public Property name() As String
		Get
			Return Me._name
		End Get
		Set
			If (String.Equals(Me._name, value) = false) Then
				Me.OnnameChanging(value)
				Me.SendPropertyChanging
				Me._name = value
				Me.SendPropertyChanged("name")
				Me.OnnameChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_lastName", DbType:="VarChar(50) NOT NULL", CanBeNull:=false)>  _
	Public Property lastName() As String
		Get
			Return Me._lastName
		End Get
		Set
			If (String.Equals(Me._lastName, value) = false) Then
				Me.OnlastNameChanging(value)
				Me.SendPropertyChanging
				Me._lastName = value
				Me.SendPropertyChanged("lastName")
				Me.OnlastNameChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_username", DbType:="VarChar(50) NOT NULL", CanBeNull:=false)>  _
	Public Property username() As String
		Get
			Return Me._username
		End Get
		Set
			If (String.Equals(Me._username, value) = false) Then
				Me.OnusernameChanging(value)
				Me.SendPropertyChanging
				Me._username = value
				Me.SendPropertyChanged("username")
				Me.OnusernameChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_password", DbType:="VarChar(64) NOT NULL", CanBeNull:=false)>  _
	Public Property password() As String
		Get
			Return Me._password
		End Get
		Set
			If (String.Equals(Me._password, value) = false) Then
				Me.OnpasswordChanging(value)
				Me.SendPropertyChanging
				Me._password = value
				Me.SendPropertyChanged("password")
				Me.OnpasswordChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_eMail", DbType:="VarChar(50) NOT NULL", CanBeNull:=false)>  _
	Public Property eMail() As String
		Get
			Return Me._eMail
		End Get
		Set
			If (String.Equals(Me._eMail, value) = false) Then
				Me.OneMailChanging(value)
				Me.SendPropertyChanging
				Me._eMail = value
				Me.SendPropertyChanged("eMail")
				Me.OneMailChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="users_tickets", Storage:="_tickets", ThisKey:="id_user", OtherKey:="id_user")>  _
	Public Property tickets() As EntitySet(Of tickets)
		Get
			Return Me._tickets
		End Get
		Set
			Me._tickets.Assign(value)
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
	
	Private Sub attach_tickets(ByVal entity As tickets)
		Me.SendPropertyChanging
		entity.users = Me
	End Sub
	
	Private Sub detach_tickets(ByVal entity As tickets)
		Me.SendPropertyChanging
		entity.users = Nothing
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.movies")>  _
Partial Public Class movies
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _id_movie As Integer
	
	Private _movieName As String
	
	Private _id_room As Integer
	
	Private _startDate As Date
	
	Private _finishDate As Date
	
	Private _startTime As System.TimeSpan
	
	Private _finishTime As System.TimeSpan
	
	Private _Price As Decimal
	
	Private _movieImage As System.Data.Linq.Binary
	
	Private _Description As String
	
	Private _id_cinema As System.Nullable(Of Integer)
	
	Private _tickets As EntitySet(Of tickets)
	
	Private _cinemas As EntityRef(Of cinemas)
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub Onid_movieChanging(value As Integer)
    End Sub
    Partial Private Sub Onid_movieChanged()
    End Sub
    Partial Private Sub OnmovieNameChanging(value As String)
    End Sub
    Partial Private Sub OnmovieNameChanged()
    End Sub
    Partial Private Sub Onid_roomChanging(value As Integer)
    End Sub
    Partial Private Sub Onid_roomChanged()
    End Sub
    Partial Private Sub OnstartDateChanging(value As Date)
    End Sub
    Partial Private Sub OnstartDateChanged()
    End Sub
    Partial Private Sub OnfinishDateChanging(value As Date)
    End Sub
    Partial Private Sub OnfinishDateChanged()
    End Sub
    Partial Private Sub OnstartTimeChanging(value As System.TimeSpan)
    End Sub
    Partial Private Sub OnstartTimeChanged()
    End Sub
    Partial Private Sub OnfinishTimeChanging(value As System.TimeSpan)
    End Sub
    Partial Private Sub OnfinishTimeChanged()
    End Sub
    Partial Private Sub OnPriceChanging(value As Decimal)
    End Sub
    Partial Private Sub OnPriceChanged()
    End Sub
    Partial Private Sub OnmovieImageChanging(value As System.Data.Linq.Binary)
    End Sub
    Partial Private Sub OnmovieImageChanged()
    End Sub
    Partial Private Sub OnDescriptionChanging(value As String)
    End Sub
    Partial Private Sub OnDescriptionChanged()
    End Sub
    Partial Private Sub Onid_cinemaChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub Onid_cinemaChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._tickets = New EntitySet(Of tickets)(AddressOf Me.attach_tickets, AddressOf Me.detach_tickets)
		Me._cinemas = CType(Nothing, EntityRef(Of cinemas))
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_id_movie", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true)>  _
	Public Property id_movie() As Integer
		Get
			Return Me._id_movie
		End Get
		Set
			If ((Me._id_movie = value)  _
						= false) Then
				Me.Onid_movieChanging(value)
				Me.SendPropertyChanging
				Me._id_movie = value
				Me.SendPropertyChanged("id_movie")
				Me.Onid_movieChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_movieName", DbType:="VarChar(50) NOT NULL", CanBeNull:=false)>  _
	Public Property movieName() As String
		Get
			Return Me._movieName
		End Get
		Set
			If (String.Equals(Me._movieName, value) = false) Then
				Me.OnmovieNameChanging(value)
				Me.SendPropertyChanging
				Me._movieName = value
				Me.SendPropertyChanged("movieName")
				Me.OnmovieNameChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_id_room", DbType:="Int NOT NULL")>  _
	Public Property id_room() As Integer
		Get
			Return Me._id_room
		End Get
		Set
			If ((Me._id_room = value)  _
						= false) Then
				Me.Onid_roomChanging(value)
				Me.SendPropertyChanging
				Me._id_room = value
				Me.SendPropertyChanged("id_room")
				Me.Onid_roomChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_startDate", DbType:="Date NOT NULL")>  _
	Public Property startDate() As Date
		Get
			Return Me._startDate
		End Get
		Set
			If ((Me._startDate = value)  _
						= false) Then
				Me.OnstartDateChanging(value)
				Me.SendPropertyChanging
				Me._startDate = value
				Me.SendPropertyChanged("startDate")
				Me.OnstartDateChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_finishDate", DbType:="Date NOT NULL")>  _
	Public Property finishDate() As Date
		Get
			Return Me._finishDate
		End Get
		Set
			If ((Me._finishDate = value)  _
						= false) Then
				Me.OnfinishDateChanging(value)
				Me.SendPropertyChanging
				Me._finishDate = value
				Me.SendPropertyChanged("finishDate")
				Me.OnfinishDateChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_startTime", DbType:="Time NOT NULL")>  _
	Public Property startTime() As System.TimeSpan
		Get
			Return Me._startTime
		End Get
		Set
			If ((Me._startTime = value)  _
						= false) Then
				Me.OnstartTimeChanging(value)
				Me.SendPropertyChanging
				Me._startTime = value
				Me.SendPropertyChanged("startTime")
				Me.OnstartTimeChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_finishTime", DbType:="Time NOT NULL")>  _
	Public Property finishTime() As System.TimeSpan
		Get
			Return Me._finishTime
		End Get
		Set
			If ((Me._finishTime = value)  _
						= false) Then
				Me.OnfinishTimeChanging(value)
				Me.SendPropertyChanging
				Me._finishTime = value
				Me.SendPropertyChanged("finishTime")
				Me.OnfinishTimeChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Price", DbType:="Money NOT NULL")>  _
	Public Property Price() As Decimal
		Get
			Return Me._Price
		End Get
		Set
			If ((Me._Price = value)  _
						= false) Then
				Me.OnPriceChanging(value)
				Me.SendPropertyChanging
				Me._Price = value
				Me.SendPropertyChanged("Price")
				Me.OnPriceChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_movieImage", DbType:="VarBinary(MAX) NOT NULL", CanBeNull:=false, UpdateCheck:=UpdateCheck.Never)>  _
	Public Property movieImage() As System.Data.Linq.Binary
		Get
			Return Me._movieImage
		End Get
		Set
			If (Object.Equals(Me._movieImage, value) = false) Then
				Me.OnmovieImageChanging(value)
				Me.SendPropertyChanging
				Me._movieImage = value
				Me.SendPropertyChanged("movieImage")
				Me.OnmovieImageChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Description", DbType:="VarChar(200) NOT NULL", CanBeNull:=false)>  _
	Public Property Description() As String
		Get
			Return Me._Description
		End Get
		Set
			If (String.Equals(Me._Description, value) = false) Then
				Me.OnDescriptionChanging(value)
				Me.SendPropertyChanging
				Me._Description = value
				Me.SendPropertyChanged("Description")
				Me.OnDescriptionChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_id_cinema", DbType:="Int")>  _
	Public Property id_cinema() As System.Nullable(Of Integer)
		Get
			Return Me._id_cinema
		End Get
		Set
			If (Me._id_cinema.Equals(value) = false) Then
				If Me._cinemas.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.Onid_cinemaChanging(value)
				Me.SendPropertyChanging
				Me._id_cinema = value
				Me.SendPropertyChanged("id_cinema")
				Me.Onid_cinemaChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="movies_tickets", Storage:="_tickets", ThisKey:="id_movie", OtherKey:="id_movie")>  _
	Public Property tickets() As EntitySet(Of tickets)
		Get
			Return Me._tickets
		End Get
		Set
			Me._tickets.Assign(value)
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="cinemas_movies", Storage:="_cinemas", ThisKey:="id_cinema", OtherKey:="id_cinema", IsForeignKey:=true)>  _
	Public Property cinemas() As cinemas
		Get
			Return Me._cinemas.Entity
		End Get
		Set
			Dim previousValue As cinemas = Me._cinemas.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._cinemas.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._cinemas.Entity = Nothing
					previousValue.movies.Remove(Me)
				End If
				Me._cinemas.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.movies.Add(Me)
					Me._id_cinema = value.id_cinema
				Else
					Me._id_cinema = CType(Nothing, Nullable(Of Integer))
				End If
				Me.SendPropertyChanged("cinemas")
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
	
	Private Sub attach_tickets(ByVal entity As tickets)
		Me.SendPropertyChanging
		entity.movies = Me
	End Sub
	
	Private Sub detach_tickets(ByVal entity As tickets)
		Me.SendPropertyChanging
		entity.movies = Nothing
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.tickets")>  _
Partial Public Class tickets
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _id_ticket As Integer
	
	Private _id_user As Integer
	
	Private _id_movie As Integer
	
	Private _id_room As System.Nullable(Of Integer)
	
	Private _seat As String
	
	Private _price As System.Nullable(Of Decimal)
	
	Private _movies As EntityRef(Of movies)
	
	Private _users As EntityRef(Of users)
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub Onid_ticketChanging(value As Integer)
    End Sub
    Partial Private Sub Onid_ticketChanged()
    End Sub
    Partial Private Sub Onid_userChanging(value As Integer)
    End Sub
    Partial Private Sub Onid_userChanged()
    End Sub
    Partial Private Sub Onid_movieChanging(value As Integer)
    End Sub
    Partial Private Sub Onid_movieChanged()
    End Sub
    Partial Private Sub Onid_roomChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub Onid_roomChanged()
    End Sub
    Partial Private Sub OnseatChanging(value As String)
    End Sub
    Partial Private Sub OnseatChanged()
    End Sub
    Partial Private Sub OnpriceChanging(value As System.Nullable(Of Decimal))
    End Sub
    Partial Private Sub OnpriceChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._movies = CType(Nothing, EntityRef(Of movies))
		Me._users = CType(Nothing, EntityRef(Of users))
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_id_ticket", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true)>  _
	Public Property id_ticket() As Integer
		Get
			Return Me._id_ticket
		End Get
		Set
			If ((Me._id_ticket = value)  _
						= false) Then
				Me.Onid_ticketChanging(value)
				Me.SendPropertyChanging
				Me._id_ticket = value
				Me.SendPropertyChanged("id_ticket")
				Me.Onid_ticketChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_id_user", DbType:="Int NOT NULL")>  _
	Public Property id_user() As Integer
		Get
			Return Me._id_user
		End Get
		Set
			If ((Me._id_user = value)  _
						= false) Then
				If Me._users.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.Onid_userChanging(value)
				Me.SendPropertyChanging
				Me._id_user = value
				Me.SendPropertyChanged("id_user")
				Me.Onid_userChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_id_movie", DbType:="Int NOT NULL")>  _
	Public Property id_movie() As Integer
		Get
			Return Me._id_movie
		End Get
		Set
			If ((Me._id_movie = value)  _
						= false) Then
				If Me._movies.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.Onid_movieChanging(value)
				Me.SendPropertyChanging
				Me._id_movie = value
				Me.SendPropertyChanged("id_movie")
				Me.Onid_movieChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_id_room", DbType:="Int")>  _
	Public Property id_room() As System.Nullable(Of Integer)
		Get
			Return Me._id_room
		End Get
		Set
			If (Me._id_room.Equals(value) = false) Then
				Me.Onid_roomChanging(value)
				Me.SendPropertyChanging
				Me._id_room = value
				Me.SendPropertyChanged("id_room")
				Me.Onid_roomChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_seat", DbType:="VarChar(2)")>  _
	Public Property seat() As String
		Get
			Return Me._seat
		End Get
		Set
			If (String.Equals(Me._seat, value) = false) Then
				Me.OnseatChanging(value)
				Me.SendPropertyChanging
				Me._seat = value
				Me.SendPropertyChanged("seat")
				Me.OnseatChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_price", DbType:="Money")>  _
	Public Property price() As System.Nullable(Of Decimal)
		Get
			Return Me._price
		End Get
		Set
			If (Me._price.Equals(value) = false) Then
				Me.OnpriceChanging(value)
				Me.SendPropertyChanging
				Me._price = value
				Me.SendPropertyChanged("price")
				Me.OnpriceChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="movies_tickets", Storage:="_movies", ThisKey:="id_movie", OtherKey:="id_movie", IsForeignKey:=true)>  _
	Public Property movies() As movies
		Get
			Return Me._movies.Entity
		End Get
		Set
			Dim previousValue As movies = Me._movies.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._movies.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._movies.Entity = Nothing
					previousValue.tickets.Remove(Me)
				End If
				Me._movies.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.tickets.Add(Me)
					Me._id_movie = value.id_movie
				Else
					Me._id_movie = CType(Nothing, Integer)
				End If
				Me.SendPropertyChanged("movies")
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="users_tickets", Storage:="_users", ThisKey:="id_user", OtherKey:="id_user", IsForeignKey:=true)>  _
	Public Property users() As users
		Get
			Return Me._users.Entity
		End Get
		Set
			Dim previousValue As users = Me._users.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._users.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._users.Entity = Nothing
					previousValue.tickets.Remove(Me)
				End If
				Me._users.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.tickets.Add(Me)
					Me._id_user = value.id_user
				Else
					Me._id_user = CType(Nothing, Integer)
				End If
				Me.SendPropertyChanged("users")
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
End Class
